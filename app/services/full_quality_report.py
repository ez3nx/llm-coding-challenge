import io
# from weasyprint import HTML, CSS
from xhtml2pdf import pisa
from markdown2 import Markdown
import base64

from app.models.llm_service import ask_yandex_gpt


def generate_full_quality_report(commits: list) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—ã–π LLM-–æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö `llm_summary` –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤.
    """
    if not commits:
        return "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

    summaries = []
    for commit in commits:
        sha = commit.get("sha", "???")
        author = commit.get("author", "Unknown")
        date = commit.get("date")
        summary = commit.get("llm_summary", "").strip()

        if summary:
            summaries.append(f"üì¶ Commit: {sha} ‚Äî {author} ‚Äî {date}\n{summary}")

    combined_prompt = (
        "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞. –í–æ—Ç —Å–≤–æ–¥–∫–∏ –ø–æ –∫–æ–º–º–∏—Ç–∞–º –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n\n"
        + "\n\n".join(summaries)
        + "\n\nüìä –°—Ñ–æ—Ä–º–∏—Ä—É–π –µ–¥–∏–Ω—ã–π –≤—ã–≤–æ–¥ –æ –µ–≥–æ –ø–æ–¥—Ö–æ–¥–µ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∏–ª—å–Ω—ã—Ö/—Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∏ –æ–±—â–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞."
    )

    return ask_yandex_gpt(combined_prompt)


def get_pdf_download_link(markdown_content, filename, text):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib.enums import TA_LEFT
    import io
    import base64
    import os
    import tempfile
    from markdown2 import markdown
    import re
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    # –≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Arial Unicode MS –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞
    
    # –°–æ–∑–¥–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    temp_dir = tempfile.mkdtemp()
    font_path = os.path.join(temp_dir, "cyrillic_font.ttf")
    
    # –í–º–µ—Å—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞, —Å–∫–∞—á–∞–µ–º –µ–≥–æ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    import urllib.request
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ DejaVu Sans —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    font_url = "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf"
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
        urllib.request.urlretrieve(font_url, font_path)
        font_name = "DejaVuSans"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
        pdfmetrics.registerFont(TTFont(font_name, font_path))
        
        # –°–æ–∑–¥–∞–µ–º PDF
        pdf_bytes = io.BytesIO()
        doc = SimpleDocTemplate(pdf_bytes, pagesize=A4)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–∞
        styles = getSampleStyleSheet()
        normal_style = ParagraphStyle(
            'CustomNormal',
            fontName=font_name,
            fontSize=12,
            leading=14,
            alignment=TA_LEFT
        )
        title_style = ParagraphStyle(
            'CustomTitle',
            fontName=font_name,
            fontSize=18,
            leading=22,
            alignment=TA_LEFT
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        elements = [
            Paragraph("Code Quality Report", title_style),
            Spacer(1, 0.25*inch)
        ]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Paragraph
        html_content = markdown(markdown_content)
        
        # –£–ø—Ä–æ—â–∞–µ–º HTML –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ reportlab
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è reportlab
        plain_html = re.sub(r'<pre.*?>.*?</pre>', 
                           lambda m: re.sub(r'<.*?>', '', m.group(0)), 
                           html_content, 
                           flags=re.DOTALL)
        plain_html = re.sub(r'<(?!p|b|i|u|br|/p|/b|/i|/u|/br)[^>]*>', '', plain_html)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
        for paragraph in plain_html.split('<p>'):
            if paragraph.strip():
                # –û—á–∏—â–∞–µ–º –∞–±–∑–∞—Ü –æ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤
                clean_paragraph = paragraph.replace('</p>', '')
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º XML —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                safe_text = clean_paragraph.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç
                elements.append(Paragraph(safe_text, normal_style))
                elements.append(Spacer(1, 0.1*inch))
        
        # –°—Ç—Ä–æ–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc.build(elements)
        pdf_bytes.seek(0)
        
        # –ö–æ–¥–∏—Ä—É–µ–º PDF –≤ base64 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        b64 = base64.b64encode(pdf_bytes.read()).decode()
        href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}" style="text-decoration: none; color: #EF3124; font-weight: 500; display: inline-flex; align-items: center;"><span style="margin-right: 5px;">üì•</span> {text}</a>'
        return href
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return f'<p style="color: red;">–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}</p>'
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(font_path):
            os.remove(font_path)
        if os.path.exists(temp_dir):
            os.rmdir(temp_dir)