from app.models.llm_service import ask_yandex_gpt
from datetime import datetime


def generate_full_quality_report(commits: list) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—ã–π LLM-–æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö `llm_summary` –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤.
    """
    if not commits:
        return "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

    summaries = []
    for commit in commits:
        sha = commit.get("sha", "???")
        author = commit.get("author", "Unknown")
        date = commit.get("date")
        summary = commit.get("llm_summary", "").strip()

        if summary:
            summaries.append(f"üì¶ Commit: {sha} ‚Äî {author} ‚Äî {date}\n{summary}")

    combined_diff_summary = "\n\n".join(summaries)
    try:
        date_from = datetime.strptime(
            str(commits[-1].get("date")), "%Y-%m-%d %H:%M:%S%z"
        ).date()
        date_to = datetime.strptime(
            str(commits[0].get("date")), "%Y-%m-%d %H:%M:%S%z"
        ).date()
    except Exception:
        # fallback: –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–µ–Ω
        date_from = commits[-1].get("date", "")[:10]
        date_to = commits[0].get("date", "")[:10]
    prompt = f"""
    –¢—ã ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞. –ù–∞ –≤—Ö–æ–¥ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å LLM-–∞–Ω–∞–ª–∏–∑—ã –∫–æ–º–º–∏—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. 
    –ù–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å **—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç**, 
    –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –∏–ª–∏ –≤ HR.

    üîª –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–ü–ò–®–ò –ù–ê –†–£–°–°–ö–û–ú):

    ---

    ### –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    - –§–ò–û: –£–∫–∞–∂–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –∞–≤—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ "N/A"
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤: {len(commits)}
    - –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–º–º–∏—Ç–æ–≤: –æ—Ç {date_from} –¥–æ {date_to}

    ### –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞:
    - –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ

    ### –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
    –°–æ–±–µ—Ä–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
    - –°—Å—ã–ª–∫–∞ –Ω–∞ MR:
    - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ MR:
    - –°–ª–æ–∂–Ω–æ—Å—Ç—å: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî –ù–∏–∑–∫–∞—è / –°—Ä–µ–¥–Ω—è—è / –í—ã—Å–æ–∫–∞—è
    - –ü—Ä–æ–±–ª–µ–º—ã: (–µ—Å–ª–∏ –±—ã–ª–∏)
    - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã: (–µ—Å–ª–∏ –µ—Å—Ç—å)
    
    –ò —Ç–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –∫–∞–∂–¥—ã–π MR
    ---

    ‚ö†Ô∏è –û—á–µ–Ω—å –≤–∞–∂–Ω–æ:
    - –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    - –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
    - –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤—ã–≤–æ–¥
    - –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–≤–æ–¥–Ω—ã—Ö "–ø–æ –¥–∞–Ω–Ω—ã–º –Ω–∏–∂–µ"

    –í–æ—Ç –∞–Ω–∞–ª–∏–∑—ã –∫–æ–º–º–∏—Ç–æ–≤:\n\n{combined_diff_summary}
        """

    return ask_yandex_gpt(prompt)


def get_pdf_download_link(markdown_content, filename, link_text):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
    from reportlab.lib.units import inch
    from reportlab.lib.enums import TA_LEFT, TA_CENTER
    from reportlab.lib.colors import HexColor
    import base64, io, os, traceback

    try:
        font_path = os.path.join("fonts", "DejaVuSans.ttf")
        font_name = "DejaVuSans"
        pdfmetrics.registerFont(TTFont(font_name, font_path))

        pdf_bytes = io.BytesIO()
        doc = SimpleDocTemplate(
            pdf_bytes,
            pagesize=A4,
            rightMargin=50,
            leftMargin=50,
            topMargin=70,
            bottomMargin=50,
        )

        # –°—Ç–∏–ª–∏
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            "Title",
            fontName=font_name,
            fontSize=20,
            alignment=TA_CENTER,
            textColor=HexColor("#000000"),
            spaceAfter=20,
            leading=24,
        )

        brand_style = ParagraphStyle(
            "Brand",
            fontName=font_name,
            fontSize=14,
            alignment=TA_LEFT,
            textColor=HexColor("#EF3124"),
            spaceAfter=12,
        )

        normal_style = ParagraphStyle(
            "Normal",
            fontName=font_name,
            fontSize=11,
            leading=16,
            spaceAfter=10,
            alignment=TA_LEFT,
        )

        # –°–±–æ—Ä–∫–∞ PDF
        elements = []
        elements.append(Paragraph("–ê–ª—å—Ñ–∞ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", brand_style))
        elements.append(Paragraph("–û—Ç—á–µ—Ç –æ–± –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞", title_style))
        elements.append(Spacer(1, 0.3 * inch))

        for para in markdown_content.split("\n\n"):
            clean = para.strip()

            if clean:
                # –£–¥–∞–ª—è–µ–º markdown bold –∏ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º html —Ç–µ–≥–∏
                clean = clean.replace("**", "").replace("__", "")
                elements.append(Paragraph(clean.replace("\n", "<br/>"), normal_style))
                elements.append(Spacer(1, 0.1 * inch))

        doc.build(elements)
        pdf_bytes.seek(0)

        b64 = base64.b64encode(pdf_bytes.read()).decode()
        href = f"""
        <a href="data:application/pdf;base64,{b64}" download="{filename}" 
           style="text-decoration: none; color: #EF3124; font-weight: 500; 
           display: inline-flex; align-items: center; margin-top: 1rem;">
           <span style="margin-right: 5px;">üì•</span> {link_text}</a>
        """
        return href

    except Exception:
        return f'<pre style="color:red;">–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:\n{traceback.format_exc()}</pre>'
