import os
from typing import List, Dict, Any
from datetime import datetime
from github import Github
from typing import Union
from datetime import timedelta
from dotenv import load_dotenv
from app.models.llm_service import ask_qwen, revise_code_review_with_gemini
from app.utils.criteria_loader import load_review_criteria


from app.services.full_quality_report import (
    generate_full_quality_report,
    get_pdf_download_link,
)

load_dotenv()


class GitService:
    def __init__(self):
        self.github_token = os.getenv("GITHUB_TOKEN")
        self.github_client = Github(self.github_token)

    def get_developer_mrs(
        self,
        developer_username: str,
        repo_name: str,
        start_date: Union[str, datetime, None],
        end_date: Union[str, datetime, None],
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ MRs —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        Args:
            developer_username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            repo_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD' –∏–ª–∏ datetime)
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD' –∏–ª–∏ datetime)
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ MRs
        """

        if start_date and isinstance(start_date, str):
            start_date = datetime.strptime(start_date, "%Y-%m-%d")

        if end_date and isinstance(end_date, str):
            end_date = datetime.strptime(end_date, "%Y-%m-%d")
        else:

            end_date = datetime.now()

        if not start_date:
            start_date = end_date - timedelta(days=365)

        print(f"–ü–æ–∏—Å–∫ PR –æ—Ç {developer_username} –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo_name}")
        print(f"–ü–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}")

        repo = self.github_client.get_repo(repo_name)

        pull_requests = repo.get_pulls(state="all")

        developer_mrs = []
        for pr in pull_requests:

            if pr.user.login != developer_username:
                continue

            pr_date = pr.merged_at if pr.merged_at else pr.created_at

            if not pr_date:
                continue

            if (start_date and pr_date < start_date) or (
                end_date and pr_date > end_date
            ):
                continue

            mr_data = {
                "mr_id": str(pr.number),
                "title": pr.title,
                "url": pr.html_url,
                "state": pr.state,
                "created_at": pr.created_at,
                "merged_at": pr.merged_at,
                "closed_at": pr.closed_at,
                "branch": pr.head.ref,
                "files_changed": self._count_files_changed(pr),
                "lines_added": pr.additions,
                "lines_removed": pr.deletions,
                "is_merged": pr.merged,
                "commits": pr.commits,
            }

            if pr.changed_files <= 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                mr_data["code_changes"] = self._get_code_changes(pr)
            else:
                mr_data["code_changes"] = []
                mr_data["skipped_code_changes"] = True

            developer_mrs.append(mr_data)

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(developer_mrs)} PR –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ {developer_username}")
        return developer_mrs

    def get_all_commit_authors(self, repo_name: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

        Args:
            repo_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
        """
        try:
            print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_name}")

            repo = self.github_client.get_repo(repo_name)

            authors_dict = {}

            all_commits = repo.get_commits()

            count = 0

            for commit in all_commits:
                count += 1
                if count % 100 == 0:
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –∫–æ–º–º–∏—Ç–æ–≤...")

                author_name = commit.commit.author.name
                author_email = commit.commit.author.email

                github_user = None
                github_login = None
                if commit.author:
                    github_user = commit.author
                    github_login = github_user.login

                key = author_email.lower()

                if key not in authors_dict:
                    authors_dict[key] = {
                        "name": author_name,
                        "email": author_email,
                        "github_login": github_login,
                        "commit_count": 1,
                        "first_commit_date": commit.commit.author.date,
                        "last_commit_date": commit.commit.author.date,
                    }
                else:
                    authors_dict[key]["commit_count"] += 1

                    if (
                        commit.commit.author.date
                        > authors_dict[key]["last_commit_date"]
                    ):
                        authors_dict[key][
                            "last_commit_date"
                        ] = commit.commit.author.date

                    if (
                        commit.commit.author.date
                        < authors_dict[key]["first_commit_date"]
                    ):
                        authors_dict[key][
                            "first_commit_date"
                        ] = commit.commit.author.date

                    if not authors_dict[key]["github_login"] and github_login:
                        authors_dict[key]["github_login"] = github_login

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤
            authors_list = list(authors_dict.values())
            authors_list.sort(key=lambda x: x["commit_count"], reverse=True)

            print(f"–ù–∞–π–¥–µ–Ω–æ {len(authors_list)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤")
            return authors_list

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤: {e}")
            return []

    def _count_files_changed(self, pull_request) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ PR"""
        return pull_request.changed_files

    def _get_code_changes(self, pull_request) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ PR
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö/—É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –∏ –ø–∞—Ç—á–µ
        """
        changes = []
        try:
            files = pull_request.get_files()
            for file in files:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–¥–∞
                if self._is_code_file(file.filename):
                    change = {
                        "filename": file.filename,
                        "status": file.status,
                        "additions": file.additions,
                        "deletions": file.deletions,
                        "patch": (
                            file.patch if hasattr(file, "patch") and file.patch else ""
                        ),
                        "raw_url": file.raw_url if hasattr(file, "raw_url") else "",
                    }
                    changes.append(change)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞: {e}")
        return changes

    def _is_code_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ–¥–æ–≤—ã–º (–Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–º, –Ω–µ –∫–æ–Ω—Ñ–∏–≥–æ–º –∏ —Ç.–¥.)"""
        code_extensions = [
            ".py",
            ".js",
            ".ts",
            ".java",
            ".c",
            ".cpp",
            ".cs",
            ".go",
            ".rb",
            ".php",
            ".swift",
            ".kt",
            ".rs",
            ".scala",
            ".sh",
            ".html",
            ".css",
            ".sql",
            ".jsx",
            ".tsx",
            ".vue",
            ".xml",
            ".json",
            ".yml",
            ".yaml",
        ]
        _, ext = os.path.splitext(filename)
        return ext.lower() in code_extensions

    def get_repository_commits(
        self,
        repo_name: str,
        developer_username: str = None,
        start_date=None,
        end_date=None,
        load_all_history: bool = False,
        use_llm: bool = True,  # üëà –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–ª–∞–≥
        full_report: bool = False,
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ LLM-–∞–Ω–∞–ª–∏–∑–æ–º.
        """
        import datetime

        if load_all_history:
            start_date = None
            print("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤")
        else:
            if isinstance(start_date, str):
                start_date = datetime.datetime.strptime(start_date, "%Y-%m-%d")
            elif (
                start_date
                and isinstance(start_date, datetime.date)
                and not isinstance(start_date, datetime.datetime)
            ):
                start_date = datetime.datetime.combine(start_date, datetime.time.min)

            if start_date is None:
                start_date = datetime.datetime.now() - datetime.timedelta(days=30)

        if isinstance(end_date, str):
            end_date = datetime.datetime.strptime(end_date, "%Y-%m-%d")
        elif (
            end_date
            and isinstance(end_date, datetime.date)
            and not isinstance(end_date, datetime.datetime)
        ):
            end_date = datetime.datetime.combine(end_date, datetime.time.max)

        if end_date is None:
            end_date = datetime.datetime.now()

        print(f"–ü–æ–∏—Å–∫ –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo_name}")
        if developer_username:
            print(f"–ê–≤—Ç–æ—Ä: {developer_username}")

        if start_date:
            print(f"–ü–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}")
        else:
            print(f"–ü–µ—Ä–∏–æ–¥: –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ {end_date}")

        repo = self.github_client.get_repo(repo_name)

        commits = []
        try:
            author = developer_username if developer_username else None
            all_commits = repo.get_commits(
                author=author, since=start_date, until=end_date
            )

            for commit in all_commits:
                commit_data = {
                    "sha": commit.sha,
                    "message": commit.commit.message,
                    "author": commit.commit.author.name,
                    "author_email": commit.commit.author.email,
                    "date": commit.commit.author.date,
                    "url": commit.html_url,
                    "stats": {
                        "additions": commit.stats.additions,
                        "deletions": commit.stats.deletions,
                        "total": commit.stats.total,
                    },
                    "files": [],
                }
                # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for file in commit.files:
                    file_data = {
                        "filename": file.filename,
                        "status": file.status,
                        "additions": file.additions,
                        "deletions": file.deletions,
                        "changes": file.changes,
                    }
                    if hasattr(file, "patch") and file.patch:
                        file_data["patch"] = file.patch
                    commit_data["files"].append(file_data)

                # –î–æ–±–∞–≤–ª—è–µ–º LLM-–∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω
                if use_llm:

                    def extract_attr(file, key, default=""):
                        if isinstance(file, dict):
                            return file.get(key, default)
                        return getattr(file, key, default)

                    try:
                        file_patches = "\n\n".join(
                            f"--- {extract_attr(file, 'filename')} ---\n{extract_attr(file, 'patch')}"
                            for file in commit_data["files"]
                            if extract_attr(file, "patch")
                        )

                        criteria = load_review_criteria()
                        criteria_text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–¥–∞:\n\n"
                        for section in criteria.get("sections", []):
                            criteria_text += (
                                f"## {section['title']}\n{section['description']}\n\n"
                            )

                        prompt = f"""
                        –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π senior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ Java, Python –∏ PHP —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º code review. 
                        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π diff –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

                        üîπ –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —á–µ—Å—Ç–Ω–æ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
                        - –ù–µ –ø—Ä–∏–¥–∏—Ä–∞–π—Å—è –∫ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –Ω–µ–¥–æ—á—ë—Ç–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–¥–∞.
                        - –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –≤–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ diff ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
                        - –ù–µ —É–∫–∞–∑—ã–≤–∞–π "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", "–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" –∏ –¥—Ä—É–≥–∏–µ –æ–±—â–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç diff.
                        - –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–º–Ω–æ–≥–æ, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è—Ö.

                        üîπ –û—Ü–µ–Ω–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

                        {criteria_text}

                        üîπ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ Markdown —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É:

                        ### üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π 
                        –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π (2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).

                        ### ‚úÖ Best practice
                        - –£–∫–∞–∂–∏, –∫–∞–∫–∏–µ —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±—ã–ª–∏ —Å–æ–±–ª—é–¥–µ–Ω—ã.

                        ### ‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏
                        - –ü–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏.
                        - –ù–µ —É–∫–∞–∑—ã–≤–∞–π –Ω–∞–¥—É–º–∞–Ω–Ω—ã–µ –∏–ª–∏ –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è.
                        - –ù–µ –æ—Ü–µ–Ω–∏ "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è" –∏–ª–∏ "–º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏", –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ diff.

                        ### üß© –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã
                        - –£–∫–∞–∂–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.
                        - –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.

                        ### üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
                        - –û–±—ä–µ–∫—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10.
                        - –û—Ü–µ–Ω–∫–∞ 9-10 - –æ—Ç–ª–∏—á–Ω–æ, 7-8 - —Ö–æ—Ä–æ—à–æ
                        - –ù–µ —Å–Ω–∏–∂–∞–π –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–ª–∫–∏–µ –∏ –Ω–µ –≤–Ω–æ—Å—è—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º.
                            
                        diff –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:
                        {file_patches}
                        """

                        raw_review = ask_qwen(prompt)
                        try:
                            revised_review = revise_code_review_with_gemini(
                                diff=file_patches, first_review=raw_review
                            )

                            commit_data["llm_summary"] = revised_review
                            commit_data["llm_summary_raw"] = raw_review

                        except Exception as e:
                            print(f"[–û—à–∏–±–∫–∞ —Ä–µ–≤–∏–∑–æ—Ä–∞ Gemini]: {e}")

                            commit_data["llm_summary"] = raw_review

                    except Exception as e:
                        commit_data["llm_summary"] = f"[–û—à–∏–±–∫–∞ LLM]: {e}"

                commits.append(commit_data)

            print(f"–ù–∞–π–¥–µ–Ω–æ {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤")
            if full_report:
                report = generate_full_quality_report(commits)
                print(report)

                pdf_link = get_pdf_download_link(
                    markdown_content=report,
                    filename=f"code_quality_{developer_username}.pdf",
                    link_text="üì• –°–∫–∞—á–∞—Ç—å –ê–ª—å—Ñ–∞-–æ—Ç—á–µ—Ç",
                )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤: {e}")

        return commits
