import os
import requests
from dotenv import load_dotenv
import google.generativeai as genai
from app.utils.criteria_loader import load_review_criteria

load_dotenv()

YANDEX_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))


def ask_qwen(prompt: str, model="qwen/qwen-2.5-coder-32b-instruct", max_tokens=1200, temperature=0.3):
    headers = {
        "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": temperature,
        "max_tokens": max_tokens
    }

    url = "https://openrouter.ai/api/v1/chat/completions"
    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {response.status_code} {response.text}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter"



def ask_yandex_gpt(prompt: str, temperature=0.4, max_tokens=800):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–≤–µ—Å—å —Ç–µ–∫—Å—Ç) —á–µ—Ä–µ–∑ YandexGPT 32k"""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",  # –∏–ª–∏ yandexgpt-lite, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": max_tokens
        },
        "messages": [
            {"role": "user", "text": prompt}
        ]
    }

    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()["result"]["alternatives"][0]["message"]["text"]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ YandexGPT: {response.status_code} {response.text}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT"


def ask_gemini(prompt: str):
    headers = {
        "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "google/gemini-2.5-pro-exp-03-25:free",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.3,
        "max_tokens": 3072
    }

    url = "https://openrouter.ai/api/v1/chat/completions"
    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {response.status_code} {response.text}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter"

def revise_code_review_with_gemini(diff: str, first_review: str, temperature=0.3, max_tokens=3072):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ AI –ø–æ –∫–æ–¥—É.
    –ú–æ–¥–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π diff –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ:
    - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π,
    - —É–±–∏—Ä–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã,
    - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è,
    - –ª–∏–±–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
    """
    criteria = load_review_criteria()
    criteria_text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–¥–∞:\n\n"
    for section in criteria.get("sections", []):
        criteria_text += f"## {section['title']}\n{section['description']}\n\n"
    prompt = f"""
    –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π senior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á—ë—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é, –ø–æ diff –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞.

    –í–æ—Ç –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:

    1. üìå –ï—Å–ª–∏ –≤ –æ—Ç—á—ë—Ç–µ –µ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç **—Ç–µ–∫—É—â–µ–º—É diff** ‚Äî —É–¥–∞–ª–∏ –∏—Ö.
    2. ‚úèÔ∏è –ï—Å–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ—Ç–æ—á–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ ‚Äî –ø–µ—Ä–µ–ø–∏—à–∏ –∏—Ö —Å —É–ª—É—á—à–µ–Ω–∏–µ–º.
    3. ‚úÖ –ï—Å–ª–∏ –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.
    4. ‚ùå –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ‚Äî —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ–º, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å.
    5. üí¨ –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
       - `‚úÖ –í—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ` ‚Äî –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å
       - `‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ` ‚Äî –µ—Å–ª–∏ —Ç—ã –≤–Ω—ë—Å –ø—Ä–∞–≤–∫–∏

    ---

    üß© –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî Markdown. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

    ### üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    (–û—Å—Ç–∞–≤—å, –ø–µ—Ä–µ–ø–∏—à–∏ –∏–ª–∏ —É–¥–∞–ª–∏ ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç—á—ë—Ç–∞)

    ### ‚úÖ Best practice
    (–û—Å—Ç–∞–≤—å, –ø–µ—Ä–µ–ø–∏—à–∏ –∏–ª–∏ —É–¥–∞–ª–∏)

    ### ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    (–û—Å—Ç–∞–≤—å, –ø–µ—Ä–µ–ø–∏—à–∏ –∏–ª–∏ —É–¥–∞–ª–∏)

    ### üß© –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã
    (–û—Å—Ç–∞–≤—å, –ø–µ—Ä–µ–ø–∏—à–∏ –∏–ª–∏ —É–¥–∞–ª–∏)

    ### üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    (–û—Å—Ç–∞–≤—å, –ø–µ—Ä–µ–ø–∏—à–∏ –∏–ª–∏ —É–¥–∞–ª–∏)

    ---

    üéØ Diff:
    {diff}

    ---

    üìÑ –û—Ç—á—ë—Ç –æ—Ç –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏:
    {first_review}
    """
    return ask_gemini(prompt, temperature=temperature, max_tokens=max_tokens)
